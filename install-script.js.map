{"version":3,"file":"install-script.js","mappings":"AAMAA,OAAOC,iBAAiB,QAAQC,UAE5B,MAAMC,EAAc,CAChB,CAAC,gBAAiBH,OAAOI,UAAUC,eACnC,CAAC,SAAUL,OAAOM,QAClB,CAAC,cAAeN,OAAOO,cAEtBC,QAAQC,IAAWA,EAAM,KACzBC,KAAKD,GAAUA,EAAM,KACrBE,KAAK,MACV,GAAIR,GAhBR,SAAsBS,GAClB,MAAMC,EAAWC,SAASC,eAAe,UACrCF,IACAA,EAASG,UAAYJ,EAE7B,CAYQK,CAAa,+EAA+Ed,uDAG3F,CACDe,QAAQC,IAAI,uEAKZ,UACUf,UAAUC,cAAce,SAAS,QAI3C,CAFA,MAAOC,SACGjB,UAAUC,cAAce,SAAS,SAC3C,OAEMhB,UAAUC,cAAciB,aACHlB,UAAUC,cAAckB,mBAClCC,SAAWpB,UAAUC,cAAcoB,YAGhDzB,OAAO0B,SAASC,QAExB","sources":["webpack://@dfinity/service-worker/./src/index.ts"],"sourcesContent":["function updateStatus(message) {\n    const statusEl = document.getElementById('status');\n    if (statusEl) {\n        statusEl.innerText = message;\n    }\n}\nwindow.addEventListener('load', async () => {\n    // Verify user's web browser has necessary support\n    const unsupported = [\n        ['serviceWorker', window.navigator.serviceWorker],\n        ['BigInt', window.BigInt],\n        ['WebAssembly', window.WebAssembly],\n    ]\n        .filter((tuple) => !tuple[1])\n        .map((tuple) => tuple[0])\n        .join(', ');\n    if (unsupported) {\n        updateStatus(`This web browser cannot interact with the Internet Computer securely.  (No: ${unsupported})\n       Please try new web browser software.`);\n    }\n    else {\n        console.log(`Installing a service worker ${process.env.VERSION} to proxy and validate content...`);\n        // Ok, let's install the service worker...\n        // note: if the service worker was already installed, when the browser requested <domain>/, it would have\n        // proxied the response from <domain>/<canister-id>/, so this bootstrap file would have never been\n        // retrieved from the boundary nodes\n        try {\n            await navigator.serviceWorker.register('sw.js');\n        }\n        catch (e) {\n            await navigator.serviceWorker.register('/sw.js');\n        }\n        // delays code execution until serviceworker is ready\n        await navigator.serviceWorker.ready;\n        const registration = await navigator.serviceWorker.getRegistration();\n        if (registration.active && !navigator.serviceWorker.controller) {\n            // There's an active SW, but no controller for this tab. The service worker events are also _not_ fired.\n            // This happens after a hard refresh --> Perform a soft reload to load everything from the SW.\n            window.location.reload();\n        }\n    }\n});\n"],"names":["window","addEventListener","async","unsupported","navigator","serviceWorker","BigInt","WebAssembly","filter","tuple","map","join","message","statusEl","document","getElementById","innerText","updateStatus","console","log","register","e","ready","getRegistration","active","controller","location","reload"],"sourceRoot":""}